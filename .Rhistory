print(str(train))
## Preliminary ----
## Packages
library(data.table)
library(olsrr)
library(ranger)
library(caret)
library(gbm)
library(rpart)
library(randomForest)
library(dplyr)
library(doMC)
## Read as a data.frame so that all character variables are read as factors.
dt_train <- read.csv("~/R/House_Prices/train.csv")
dt_test <- read.csv("~/R/House_Prices/test.csv")
## Renaming columns
colnames(dt_train)[colnames(dt_train) == '1stFlrSF'] <- 'X1SF'
colnames(dt_train)[colnames(dt_train) == '2ndFlrSF'] <- 'X2SF'
colnames(dt_test)[colnames(dt_test) == '1stFlrSF'] <- 'X1SF'
colnames(dt_test)[colnames(dt_test) == '2ndFlrSF'] <- 'X2SF'
## Variable selection ----
myvar <- c("OverallQual", "Neighborhood", "GrLivArea", "ExterQual", "GarageCars",
"TotalBsmtSF", "X1SF", "GarageArea", "KitchenQual",
"YearBuilt", "X2SF", "BsmtFinSF1", "LotArea")
formula_sp <- paste0("SalePrice ~ ", paste(myvar, collapse = " + "))
## Preprocessing ----
charvar <- c("Neighbourhood", "ExterQual", "KitchenQual")
for (x in charvar){
dt_train[[x]] <- as.factor(dt_train[[x]])
dt_test[[x]] <- as.factor(dt_test[[x]])
}
dmy <- dummyVars("~ .", data = dt_train)
train <- data.frame(predict(dmy, newdata = dt_train))
dmy <- dummyVars("~ .", data = dt_test)
test <- data.frame(predict(dmy, newdata = dt_test))
View(train)
View(test)
rm(dt_test,dt_train)
##Variables with NAs
NAvar <- c("LotFrontage", "Alley", "MasVnrType", "MasVnrArea", "BsmtQual",
"BsmtCond", "BsmtExposure", "BsmtFinType1", "BsmtFinType2", "Electrical",
"FireplaceQu", "GarageType", "GarageYrBlt", "GarageFinish", "GarageQual",
"GarageCond", "PoolQC", "Fence", "MiscFeature")
NAvar_int <- c("LotFrontage", "MasVnrArea", "GarageYrBlt")
NAvar_chr <- c("Alley", "MasVnrType", "BsmtQual", "BsmtCond",
"BsmtExposure", "BsmtFinType1", "BsmtFinType2", "Electrical",
"FireplaceQu", "GarageType", "GarageFinish", "GarageQual",
"GarageCond", "PoolQC", "Fence", "MiscFeature")
## Variable importance plot ----
registerDoMC(3)
importance <- varImp(lm_model)
print(importance)
plot(importance)
## Linear Regression ----
lm_model <- lm(formula_sp,
data = dt_train)
pred_lm <- predict(lm_model, dt_test)
write.csv(pred_lm, "~/R/House_Prices/submitlm.csv")
## Gradient Boosting Machine ----
gbm_model <- gbm(formula_sp,
data = dt_train,
n.trees = 500,
shrinkage = .01,
n.minobsinnode = 20
)
pred_gbm <- (predict(gbm_model, dt_test, n.trees = 500))
write.csv(pred_gbm, file = "~/R/House_Prices/submitgbm.csv")
## caret GBM ----
registerDoMC(3)
gbmGrid <-  expand.grid(interaction.depth = c(3,5,7),
n.trees = c(500,1000),
shrinkage = c(0.025,0.1, 0.01),
n.minobsinnode = 20
)
gbmControl <- trainControl(method = "repeatedcv", number = 5, repeats = 1)
gbm.caret <- train(formula_sp, preProcess = c("center", "scale"),data=dt_train,distribution="gaussian",method="gbm",
verbose = T,tuneGrid=gbmGrid, trControl=gbmControl
)
print(gbm.caret)
pred_car_gbm <- predict(gbm.caret, dt_test)
write.csv(pred_car_gbm, "~/R/House_Prices/submit.csv")
## caret Random Forest
control <- trainControl(method = "repeatedcv",
number = 5,
repeats = 2,
verboseIter = TRUE)
#rfGrid <-  expand.grid(interaction.depth = c(1, 5, 9),
#    n.trees = 500,
#   shrinkage = 0.01,
#  n.minobsinnode = 20)
rf_model <- train(log(SalePrice) ~
OverallQual
+ Neighborhood
+ GrLivArea
+ ExterQual
+ GarageCars
+ TotalBsmtSF
+ X1stFlrSF
+ GarageArea
+ KitchenQual
+ YearBuilt
+ X2ndFlrSF
+ BsmtFinSF1
+ LotArea,
#tuneGrid = rfGrid,
data = dt_train,
method = "ranger",
trControl = control
)
predrf <- exp(predict(rf_model, dt_test))
write.csv(predrf, file = "~/R/House_Prices/submit.csv")
## Recursive Partitioning ----
rp_model <- rpart(formula_sp,
data = dt_train,
method = "class",
cp = 0.001)
pred_rp <- predict(rp_model, dt_test)
write.csv(pred_rp, file = "~/R/House_Prices/submitrp.csv")
## Variable Importance Testing ----
varimp <- varImpPlot(gbm.caret, dt_train)
plot(varimp)
print(varimp)
fit=randomForest(SalePrice ~ ., data=dt_train)
varImpPlot(fit,type=2)
print("For loop")
i <- 4
if (i < 2) {
break
} else {
print("For loop")
}
i <- 4
if (i > 2) {
break
} else {
print("For loop")
}
print("")
i <- 4
if (i > 2) {
print("")
} else {
print("For loop")
}
print(Model unused)
i <- 4
if (i > 2) {
print("unused")
} else {
print("For loop")
}
i <- 4
if (i > 2) {print("unused")}
i <- 4
if (i <2) {print("unused")}
updates()
i <- 4
if (i <2) {print("test")}
if (i <1) {print("234")}
if (i >3) {print("unused")}
i <- 4
if (i <2) {print("test")}
if (i >1) {print("234")}
if (i >3) {print("unused")}
70
70
70
[70, 77]
c(70,77)
c(78,85)
c(86,93)
c(94,101)
c(102,108)
c(63,69)
c(57,62)
6
6
6
data <-  3.897    21
3.885    14
3.778    28
2.540    22
3.028    21
3.865    31
2.962    32
3.961    27
0.500    29
3.178    26
3.310    24
3.538    30
3.083    24
3.013    24
3.245    33
2.963    27
3.522    25
3.013    31
2.947    25
2.118    20
2.563    24
3.357    21
3.731    28
3.925    27
3.556    28
3.101    26
2.420    28
2.579    22
3.871    26
3.060    21
3.927    25
2.375    16
2.929    28
3.375    26
2.857    22
3.072    24
3.381    21
3.290    30
3.549    27
3.646    26
2.978    26
2.654    30
2.540    24
2.250    26
2.069    29
2.617    24
2.183    31
2.000    15
2.952    19
3.806    18
2.871    27
3.352    16
3.305    27
2.952    26
3.547    24
3.691    30
3.160    21
2.194    20
3.323    30
3.936    29
2.922    25
2.716    23
3.370    25
3.606    23
2.642    30
2.452    21
2.655    24
3.714    32
1.806    18
3.516    23
3.039    20
2.966    23
2.482    18
2.700    18
3.920    29
2.834    20
3.222    23
3.084    26
4.000    28
3.511    34
3.323    20
3.072    20
2.079    26
3.875    32
3.208    25
2.920    27
3.345    27
3.956    29
3.808    19
2.506    21
3.886    24
2.183    27
3.429    25
3.024    18
3.750    29
3.833    24
3.113    27
2.875    21
2.747    19
2.311    18
1.841    25
1.583    18
2.879    20
3.591    32
2.914    24
3.716    35
2.800    25
3.621    28
3.792    28
2.867    25
3.419    22
3.600    30
2.394    20
2.286    20
1.486    31
3.885    20
3.800    29
3.914    28
1.860    16
2.948    28
12+12.83+14.44+(.5323+.2375)*40
12+12.83+14.44+(.5323+.2375)*40+4+(19.5/20)*6+8
12+12.83+14.44+(.5323+.2375)*40+4+(19.5/20)*6+4
12+12.83+14.44+(.5323+.2375)*40+4+(19.5/20)*6+5
12+12.83+14.44+(.5323+.2375)*40+4+(19.5/20)*6+6
dt <- as.data.table(mtcars)
dt
library(data.table)
dt <- as.data.table(mtcars)
dt
sum(is.na(paiements_train$TRANSACTION_AMT)) # 0
# Desjardins Lab DataCup
# June/July 2018
#--------------------------------------------------------#
# 0. Preliminary                                         #
# ______________________________________________________ #
#                                                        #
#   - Load in packages & data                            #
#   - Set working directories                            #
#--------------------------------------------------------#
## WD
setwd("~/Github/DesjardinsDataCup")
## Package loading
packages <- c("data.table", "rpart", "caret", "gbm", "mgcv", "ggplot2", "dplyr","Hmisc", "xgboost", "corrplot")
sapply(packages, require, character.only = T)
## Load data
facturation_train <- as.data.table(read.csv("~/Github/DesjardinsDataCup/Data/facturation_train.csv"))
facturation_test <- as.data.table(read.csv("~/Github/DesjardinsDataCup/Data/facturation_test.csv"))
paiements_train <- as.data.table(read.csv("~/Github/DesjardinsDataCup/Data/paiements_train.csv"))
paiements_test <- as.data.table(read.csv("~/Github/DesjardinsDataCup/Data/paiements_test.csv"))
performance_train <- as.data.table(read.csv("~/Github/DesjardinsDataCup/Data/performance_train.csv"))
performance_test <- as.data.table(read.csv("~/Github/DesjardinsDataCup/Data/performance_test.csv"))
transactions_train <- as.data.table(read.csv("~/Github/DesjardinsDataCup/Data/transactions_train.csv"))
transactions_test <- as.data.table(read.csv("~/Github/DesjardinsDataCup/Data/transactions_test.csv"))
sampSol <- as.data.table(read.csv("~/Github/DesjardinsDataCup/Data/sample_solution.csv"))
#--------------------------------------------------------#
# 1. Preprocessing
# ______________________________________________________
#
#   - NA/bad formatting checks & replacements
#   - Feature engineering
#   - Table merges
#--------------------------------------------------------#
# Inspect data
## NA counter and row finder function
NAcount <- function(df){
print(sum(is.na(df)))
if (sum(is.na(df)) != 0){
print(noquote("The rows containing NA's are:"))
which(is.na(df))
}
}
NAcount(facturation_train)
NAcount(paiements_train)
NAcount(performance_train)
NAcount(transactions_train)
# Impute with mean by group (ID)
paiements_train %>%
group_by(ID_CPTE) %>%
mutate(TRANSACTION_AMT= ifelse(is.na(TRANSACTION_AMT), mean(TRANSACTION_AMT, na.rm=TRUE), TRANSACTION_AMT))
sum(is.na(paiements_train$TRANSACTION_AMT)) # 0
#--------------------------------------------------------#
# 2. Variable Selection                                  #
# ______________________________________________________ #
#                                                        #
#   - detail 1                                           #
#   - detail 2                                           #
#--------------------------------------------------------#
#--------------------------------------------------------#
# 3. Modeling                                            #
# ______________________________________________________ #
#                                                        #
#   - detail 1                                           #
#   - detail 2                                           #
#--------------------------------------------------------#
#--------------------------------------------------------#
# 4. Submission                                          #
# ______________________________________________________ #
#                                                        #
#   - detail 1                                           #
#   - detail 2                                           #
#--------------------------------------------------------#
sum(is.na(paiements_train$TRANSACTION_AMT)) # 0
paiements_train <- paiements_train %>%
group_by(ID_CPTE) %>%
mutate(TRANSACTION_AMT= ifelse(is.na(TRANSACTION_AMT), mean(TRANSACTION_AMT, na.rm=TRUE), TRANSACTION_AMT))
sum(is.na(paiements_train$TRANSACTION_AMT)) # 0
# Impute with mean by group (ID)
paiements_train <- paiements_train %>%
group_by(ID_CPTE) %>%
mutate(paiements_train$TRANSACTION_AMT= ifelse(is.na(paiements_train$TRANSACTION_AMT), mean(TRANSACTION_AMT, na.rm=TRUE), TRANSACTION_AMT))
sum(is.na(paiements_train$TRANSACTION_AMT)) # 0
paiements_train <- paiements_train %>%
group_by(ID_CPTE) %>%
mutate(TRANSACTION_AMT= ifelse(is.na(TRANSACTION_AMT), mean(TRANSACTION_AMT, na.rm=TRUE), TRANSACTION_AMT))
sum(is.na(paiements_train$TRANSACTION_AMT)) # 0
sapply(paiements_train,function(x) table(is.na(x)))
NAcount <- function(df){
sapply(df,function(x) table(is.na(x)))
}
NAcount(facturation_train)
NAcount(paiements_train)
NAcount(performance_train)
NAcount(transactions_train)
paiements_train <- paiements_train %>%
group_by(ID_CPTE) %>%
mutate(TRANSACTION_AMT= ifelse(is.na(TRANSACTION_AMT), mean(TRANSACTION_AMT, na.rm=TRUE), TRANSACTION_AMT))
sum(is.na(paiements_train$TRANSACTION_AMT)) # 0
paiements_train_2 <- paiements_train %>%
group_by(ID_CPTE) %>%
mutate(TRANSACTION_AMT= ifelse(is.na(TRANSACTION_AMT), mean(TRANSACTION_AMT, na.rm=TRUE), TRANSACTION_AMT))
sum(is.na(paiements_train$TRANSACTION_AMT)) # 0
## Naive imputation right now, since group avg substitution not working
paiements_train$TRANSACTION_AMT <- ifelse(is.na(paiements_train$TRANSACTION_AMT), function(x) mean(x, na.rm=T), paiements_train$TRANSACTION_AMT)
sum(is.na(paiements_train$TRANSACTION_AMT))
## Naive imputation right now, since group avg substitution not working
paiements_train$TRANSACTION_AMT <- ifelse(is.na(paiements_train$TRANSACTION_AMT), mean(paiements_train$TRANSACTION_AMT, na.rm=T), paiements_train$TRANSACTION_AMT)
sum(is.na(paiements_train$TRANSACTION_AMT))
View(sampSol)
payments_train_grouped = payments_train %>%
group_by(ID_CPTE) %>%
summarize(mean_payment = mean(TRANSACTION_AMT),
number_payments = n(),
max_payment = max(TRANSACTION_AMT),
min_payment = min(TRANSACTION_AMT),
median_payment = median(TRANSACTION_AMT),
reversedPayment = sum(PAYMENT_REVERSAL_XFLG == "N")>=1,
noPayments = sum(PAYMENT_REVERSAL_XFLG == "")>=1)
payments_train_grouped[is.na(payments_train_grouped)] <- 0
billing_train_grouped = billing_train %>%
group_by(ID_CPTE) %>%
summarize(
mean_balance = mean(CurrentTotalBalance),
mean_cash_balance = mean(CashBalance),
max_balance = max(CurrentTotalBalance),
max_cash_balance = max(CashBalance)
)
transactions_train_grouped = payments_transactions %>%
group_by(ID_CPTE) %>%
summarize(
number_transactions = n()
)
## Thanks Tony ;)
payments_train_grouped = paiements_train %>%
group_by(ID_CPTE) %>%
summarize(mean_payment = mean(TRANSACTION_AMT),
number_payments = n(),
max_payment = max(TRANSACTION_AMT),
min_payment = min(TRANSACTION_AMT),
median_payment = median(TRANSACTION_AMT),
reversedPayment = sum(PAYMENT_REVERSAL_XFLG == "N")>=1,
noPayments = sum(PAYMENT_REVERSAL_XFLG == "")>=1)
payments_train_grouped[is.na(payments_train_grouped)] <- 0
billing_train_grouped = facturation_train %>%
group_by(ID_CPTE) %>%
summarize(
mean_balance = mean(CurrentTotalBalance),
mean_cash_balance = mean(CashBalance),
max_balance = max(CurrentTotalBalance),
max_cash_balance = max(CashBalance)
)
transactions_train_grouped = transactions_train %>%
group_by(ID_CPTE) %>%
summarize(
number_transactions = n()
)
payments_train_grouped = paiements_train %>%
group_by(ID_CPTE) %>%
summarize(mean_payment = mean(TRANSACTION_AMT),
number_payments = n(),
max_payment = max(TRANSACTION_AMT),
min_payment = min(TRANSACTION_AMT),
median_payment = median(TRANSACTION_AMT),
reversedPayment = sum(PAYMENT_REVERSAL_XFLG == "N")>=1,
noPayments = sum(PAYMENT_REVERSAL_XFLG == "")>=1)
payments_train_grouped[is.na(payments_train_grouped)] <- 0
?n()
## Thanks Tony ;)
payments_train_grouped = paiements_train %>%
group_by(ID_CPTE) %>%
summarize(mean_payment = mean(TRANSACTION_AMT),
#number_payments = n(),
max_payment = max(TRANSACTION_AMT),
min_payment = min(TRANSACTION_AMT),
median_payment = median(TRANSACTION_AMT),
reversedPayment = sum(PAYMENT_REVERSAL_XFLG == "N")>=1,
noPayments = sum(PAYMENT_REVERSAL_XFLG == "")>=1)
?summarize
billing_train_grouped = facturation_train %>%
group_by(ID_CPTE) %>%
summarize(
mean_balance = mean(CurrentTotalBalance),
mean_cash_balance = mean(CashBalance),
max_balance = max(CurrentTotalBalance),
max_cash_balance = max(CashBalance)
)
detach(dplyr)
detach(dpl"yr)
1
))
ewq
eqw
eq
we
qwe
exit
!
call())
exit
quite
""
detach("dplyr")
detach("package:dplyr", unload=TRUE)
library(plyr)
